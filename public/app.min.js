!function(){"use strict";angular.module("app",["ui.bootstrap","ui.router","ngResource","ngRoute","app.main","app.providers"])}(),function(){"use strict";angular.module("app.main",[])}(),function(){"use strict";angular.module("app.providers",[])}(),function(){"use strict";function n(n,e,o){n.debugEnabled(!0),o.html5Mode({enabled:!0,requireBase:!1});var r="vm";e.when("/",{templateUrl:"/partials/main",controller:"MainCtrl",controllerAs:r})}var e=angular.module("app");e.config(n),n.$inject=["$logProvider","$routeProvider","$locationProvider"],e.run(["$rootScope",function(n){n.$on("$stateChangeSuccess",function(e,o){n.title=o.title,n.bodyCss=o.bodyCss})}])}(),function(){"use strict";function n(){}angular.module("app.main").config(n),n.$inject=[]}(),function(){"use strict";function n(){}angular.module("app.providers").config(n),n.$inject=[]}(),function(){"use strict";function n(e,o){function r(){o.log(n,r,"Initializing..."),t.recipes=[];for(var e=1;20>=e;e++)t.recipes.push({name:"name "+e,featured:e%2===0,published:new Date})}var t=this;r()}angular.module("app.main").controller("MainCtrl",n),n.$inject=["$scope","logger"]}(),function(){"use strict";function n(n){function e(e,o,r){n.debug(u(e,o,r))}function o(e,o,r){n.error(u(e,o,r))}function r(e,o,r){n.info(u(e,o,r))}function t(e,o,r){n.log(u(e,o,r))}function i(e,o,r){n.warn(u(e,o,r))}function u(n,e,o){return n.name+" -> "+e.name+"(): "+o}return{debug:e,error:o,info:r,log:t,warn:i}}angular.module("app.providers").factory("logger",n),n.$inject=["$log"]}();
//# sourceMappingURL=data:application/json;base64,