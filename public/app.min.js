!function(){"use strict";angular.module("app",["ui.bootstrap","ui.router","ngResource","ngRoute","app.main","app.providers"])}(),function(){"use strict";angular.module("app.main",[])}(),function(){"use strict";angular.module("app.providers",[])}(),function(){"use strict";function n(n,o,e){n.debugEnabled(!0),e.html5Mode({enabled:!0,requireBase:!1});var t="vm";o.when("/",{templateUrl:"/partials/components/main/main",controller:"MainCtrl",controllerAs:t})}var o=angular.module("app");o.config(n),n.$inject=["$logProvider","$routeProvider","$locationProvider"],o.run(["$rootScope",function(n){n.$on("$stateChangeSuccess",function(o,e){n.title=e.title,n.bodyCss=e.bodyCss})}])}(),function(){"use strict";function n(){}angular.module("app.main").config(n),n.$inject=[]}(),function(){"use strict";function n(){}angular.module("app.providers").config(n),n.$inject=[]}(),function(){"use strict";function n(o,e){function t(){e.log(n,t,"Initializing..."),r.recipes=[];for(var o=1;20>=o;o++)r.recipes.push({name:"name "+o,featured:o%2===0,published:new Date})}var r=this;t()}angular.module("app.main").controller("MainCtrl",n),n.$inject=["$scope","logger"]}(),function(){"use strict";function n(n){function o(o,e,t){n.debug(u(o,e,t))}function e(o,e,t){n.error(u(o,e,t))}function t(o,e,t){n.info(u(o,e,t))}function r(o,e,t){n.log(u(o,e,t))}function i(o,e,t){n.warn(u(o,e,t))}function u(n,o,e){return n.name+" -> "+o.name+"(): "+e}return{debug:o,error:e,info:t,log:r,warn:i}}angular.module("app.providers").factory("logger",n),n.$inject=["$log"]}();
//# sourceMappingURL=data:application/json;base64,