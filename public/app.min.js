(function () {
    'use strict';

    var app = angular.module('app', [
        // Predefined modules.
        'ui.bootstrap',
        'ui.router',
        'ngResource',
        'ngRoute',

        // App components.
        'app.home',
        'app.recipes',

        // Admin components.
        'app.admin',
        'app.profile',
        'app.signUp',

        // App shared.
        'app.providers',
        'app.services',
        'app.resources'
    ]);
})();
(function () {
    'use strict';

    angular.module('app.admin', [

    ]);

})();
(function () {
    'use strict';

    angular.module('app.home', [

    ]);

})();
(function () {
    'use strict';

    angular.module('app.profile', [

    ]);

})();
(function () {
    'use strict';

    angular.module('app.recipes', [

    ]);

})();
(function () {
    'use strict';

    angular.module('app.signUp', [

    ]);

})();
(function () {
    'use strict';

    angular.module('app.providers', []);

})();
(function () {
    'use strict';

    angular.module('app.resources', []);

})();
(function () {
    'use strict';

    angular.module('app.services', []);

})();
(function () {
    'use strict';

    var app = angular.module('app');

    app.config(Configuration);

    Configuration.$inject = ['$logProvider', '$stateProvider', '$urlRouterProvider', '$locationProvider'];

    function Configuration($logProvider, $stateProvider, $urlRouterProvider, $locationProvider) {
        // Logging.
        $logProvider.debugEnabled(true);

        // HTML5 mode.
        $locationProvider.html5Mode({
            enabled: true,
            requireBase: false
        });

        // Always default to home page.
        $urlRouterProvider.otherwise('/app/home');

        // Routes.
        var defaultCtrlAs = 'vm';
        var mainViewsObj = {
            nav: {
                templateUrl: '/partials/layout/navTmpl',
                controller: 'NavCtrl',
                controllerAs: defaultCtrlAs
            },
            '': {
                templateUrl: '/partials/layout/contentTmpl',
                controller: 'ContentCtrl',
                controllerAs: defaultCtrlAs
            },
            sidebar: {
                templateUrl: '/partials/layout/sidebarTmpl',
                controller: 'SidebarCtrl',
                controllerAs: defaultCtrlAs
            },
            footer: {
                templateUrl: '/partials/layout/footerTmpl',
                controller: 'FooterCtrl',
                controllerAs: defaultCtrlAs
            }
        };

        $stateProvider
            .state('app', {
                abstract: true,
                url: '/app',
                views: mainViewsObj
            });
    }

    // Add extra properties to each state.
    app.run(['$rootScope', function ($rootScope) {
        $rootScope.$on('$stateChangeSuccess', function (event, current) {
            $rootScope.title = current.title;
            $rootScope.bodyCss = current.bodyCss;
        });
    }]);

})();
(function () {
    'use strict';

    var appAdmin = angular.module('app.admin');

    //=========================================================================
    // Config.
    //=========================================================================
    appAdmin.config(Configuration);

    Configuration.$inject = ['$stateProvider'];

    function Configuration($stateProvider) {
        var routeRoleChecks = {
            admin: {
                auth: function (authService) {
                    return authService.authorizeCurrentUserForRoute('admin');
                }
            }
        };

        $stateProvider
            .state('app.userList', {
                url: '/user-list',
                templateUrl: '/partials/components/admin/userListView',
                controller: 'UserListCtrl',
                controllerAs: 'vm',
                resolve: routeRoleChecks.admin,
                title: 'User List',
                bodyCss: 'user-list'
            });
    }

    //=========================================================================
    // Run.
    //=========================================================================
    appAdmin.run(Run);

    Run.$inject = ['$rootScope', '$state'];

    function Run($rootScope, $state) {
        $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
            if (error.notAuthorized) {
                $state.go('app.home');
            }
        });
    }
})();
(function () {
    'use strict';

    angular.module('app.home').config(Configuration);

    Configuration.$inject = ['$stateProvider'];

    function Configuration($stateProvider) {
        $stateProvider
            .state('app.home', {
                url: '/home',
                templateUrl: '/partials/components/home/homeView',
                controller: 'HomeCtrl',
                controllerAs: 'vm',
                title: 'Home',
                bodyCss: 'home'
            });
    }

})();
(function () {
    'use strict';

    angular.module('app.profile').config(Configuration);

    Configuration.$inject = ['$stateProvider'];

    function Configuration($stateProvider) {
        var routeRoleChecks = {
            user: {
                auth: function (authService) {
                    return authService.authorizeAuthenticatedUserForRoute();
                }
            }
        };

        $stateProvider
            .state('app.profile', {
                url: '/profile',
                templateUrl: '/partials/components/profile/profileView',
                controller: 'ProfileCtrl',
                controllerAs: 'vm',
                resolve: routeRoleChecks.user,
                title: 'Profile',
                bodyCss: 'profile'
            });
    }

})();
(function () {
    'use strict';

    angular.module('app.recipes').config(Configuration);

    Configuration.$inject = ['$stateProvider'];

    function Configuration($stateProvider) {
        $stateProvider
            .state('app.recipes', {
                url: '/recipes',
                templateUrl: '/partials/components/recipes/recipesView',
                controller: 'RecipesCtrl',
                controllerAs: 'vm',
                title: 'Recipes',
                bodyCss: 'recipes'
            });
    }

})();
(function () {
    'use strict';

    var appSignUp = angular.module('app.signUp');

    //=========================================================================
    // Config.
    //=========================================================================
    appSignUp.config(Configuration);

    Configuration.$inject = ['$stateProvider'];

    function Configuration($stateProvider) {
        $stateProvider
            .state('app.signUp', {
                url: '/sign-up',
                templateUrl: '/partials/components/signUp/signUpView',
                controller: 'SignUpCtrl',
                controllerAs: 'vm',
                title: 'Sign Up',
                bodyCss: 'sign-up'
            });
    }

})();
(function () {
    'use strict';

    angular.module('app.providers').config(Configuration);

    Configuration.$inject = [];

    function Configuration() {

    }

})();
(function () {
    'use strict';

    angular.module('app.resources').config(Configuration);

    Configuration.$inject = [];

    function Configuration() {

    }

})();
(function () {
    'use strict';

    angular.module('app.services').config(Configuration);

    Configuration.$inject = [];

    function Configuration() {

    }

})();
(function () {
    'use strict';

    angular.module('app').controller('ContentCtrl', ContentCtrl);

    ContentCtrl.$inject = ['logger'];

    function ContentCtrl(logger) {
        var vm = this;

        init();

        function init() {
            logger.debug(ContentCtrl, init, 'Initializing...');
        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('FooterCtrl', FooterCtrl);

    FooterCtrl.$inject = ['logger'];

    function FooterCtrl(logger) {
        var vm = this;

        init();

        function init() {
            logger.debug(FooterCtrl, init, 'Initializing...');
        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('NavCtrl', NavCtrl);

    NavCtrl.$inject = ['logger', '$http', '$state', 'notificationProvider', 'identityService', 'authService'];

    function NavCtrl(logger, $http, $state, notificationProvider, identityService, authService) {
        var vm = this;

        //=====================================================================
        // Expose functions.
        //=====================================================================
        vm.logIn = logIn;
        vm.logOut = logOut;

        //=====================================================================
        // Initialization.
        //=====================================================================
        init();

        function init() {
            logger.debug(NavCtrl, init, 'Initializing...');
            vm.identity = identityService;
        }

        //=====================================================================
        // Exposed functions implementation.
        //=====================================================================
        function logIn() {
            logger.debug(NavCtrl, logIn, 'Signing in...');

            authService.authenticateUser(vm.username, vm.password)
                .then(function (success) {
                    if (success) {
                        notificationProvider.success('You have successfully logged in.');
                    } else {
                        notificationProvider.error('Invalid user name or password!');
                    }
                });
        }

        function logOut() {
            logger.debug(NavCtrl, logOut, 'Signing in...');

            authService.logOutUser()
                .then(function () {
                    vm.username = '';
                    vm.password = '';
                    notificationProvider.info('You have been logged out.');
                    $state.go('app.home');
                });
        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('SidebarCtrl', SidebarCtrl);

    SidebarCtrl.$inject = ['logger'];

    function SidebarCtrl(logger) {
        var vm = this;

        init();

        function init() {
            logger.debug(SidebarCtrl, init, 'Initializing...');
            vm.test = 'Test Recipe';
        }

    }
})();
(function () {
    'use strict';

    angular.module('app.admin').controller('UserListCtrl', UserListCtrl);

    UserListCtrl.$inject = ['$scope', 'logger', 'UserResource'];

    function UserListCtrl($scope, logger, UserResource) {
        var vm = this;

        init();

        function init() {
            logger.debug(UserListCtrl, init, 'Initializing...');
            vm.users = UserResource.query();
        }
    }
})();
(function () {
    'use strict';

    angular.module('app.home').controller('HomeCtrl', HomeCtrl);

    HomeCtrl.$inject = ['$scope', 'logger'];

    function HomeCtrl($scope, logger) {
        var vm = this;

        init();

        function init() {
            logger.debug(HomeCtrl, init, 'Initializing...');
        }
    }
})();
(function () {
    'use strict';

    angular.module('app.profile').controller('ProfileCtrl', ProfileCtrl);

    ProfileCtrl.$inject = ['$scope', 'logger', 'validation', 'authService', 'identityService', 'notificationProvider'];

    function ProfileCtrl($scope, logger, validation, authService, identityService, notificationProvider) {
        var vm = this;

        //=====================================================================
        // Exposed functions.
        //=====================================================================
        vm.getClass = validation.getClass;
        vm.update = update;

        //=====================================================================
        // Initialization.
        //=====================================================================
        init();

        function init() {
            logger.debug(ProfileCtrl, init, 'Initializing...');

            // Update view.
            vm.email = identityService.currentUser.username;
            vm.firstName = identityService.currentUser.firstName;
            vm.lastName = identityService.currentUser.lastName;
        }

        //=====================================================================
        // Exposed functions implementation.
        //=====================================================================
        function update() {
            logger.debug(ProfileCtrl, update, 'Updating user profile...');
            vm.isLoading = true;

            var newUserData = {
                username: vm.email,
                firstName: vm.firstName,
                lastName: vm.lastName
            };

            if (vm.password && vm.password.length > 0) {
                newUserData.password = vm.password;
            }

            authService.updateCurrentUser(newUserData)
                .then(function () {
                    notificationProvider.success('Your user profile has been updated.');
                })
                .catch(function (reason) {
                    notificationProvider.error(reason);
                })
                .finally(function () {
                    vm.isLoading = false;
                });
        }
    }
})();
(function () {
    'use strict';

    angular.module('app.recipes').controller('RecipesCtrl', RecipesCtrl);

    RecipesCtrl.$inject = ['$scope', 'logger', 'RecipeResource'];

    function RecipesCtrl($scope, logger, RecipeResource) {
        var vm = this;

        //=====================================================================
        // Exposed functions.
        //=====================================================================

        //=====================================================================
        // Initialization.
        //=====================================================================
        init();

        function init() {
            vm.recipes = RecipeResource.query();
        }

        //=====================================================================
        // Exposed functions implementation.
        //=====================================================================
    }
})();
(function () {
    'use strict';

    angular.module('app.signUp').controller('SignUpCtrl', SignUpCtrl);

    SignUpCtrl.$inject = ['$scope', '$state', 'logger', 'notificationProvider', 'validation', 'authService'];

    function SignUpCtrl($scope, $state, logger, notificationProvider, validation, authService) {
        var vm = this;

        //=====================================================================
        // Exposed functions.
        //=====================================================================
        vm.getClass = validation.getClass;
        vm.signUp = signUp;

        //=====================================================================
        // Initialization.
        //=====================================================================
        init();

        function init() {
            logger.debug(SignUpCtrl, init, 'Initializing...');
        }

        //=====================================================================
        // Exposed functions implementation.
        //=====================================================================
        function signUp() {
            logger.debug(SignUpCtrl, signUp, 'Submitting form...');
            vm.isLoading = true;

            var newUserData = {
                username: vm.email,
                password: vm.password,
                firstName: vm.firstName,
                lastName: vm.lastName
            };

            authService.createUser(newUserData)
                .then(function () {
                    notificationProvider.success('User successfully created.');
                    $state.go('app.home');
                })
                .catch(function (errorResponse) {
                    notificationProvider.error(errorResponse);
                })
                .finally(function () {
                    vm.isLoading = false;
                });
        }
    }
})();
(function () {
    'use strict';

    angular.module('app.providers').factory('logger', Logger);

    Logger.$inject = ['$log'];

    function Logger($log) {
        //=====================================================================
        // Exposed functions.
        //=====================================================================
        function debug(ctrl, func, msg) {
            $log.debug(buildMsg(ctrl, func, msg));
        }

        function error(ctrl, func, msg) {
            $log.error(buildMsg(ctrl, func, msg));
        }

        function info(ctrl, func, msg) {
            $log.info(buildMsg(ctrl, func, msg));
        }

        function log(ctrl, func, msg) {
            $log.log(buildMsg(ctrl, func, msg));
        }

        function warn(ctrl, func, msg) {
            $log.warn(buildMsg(ctrl, func, msg));
        }

        //=====================================================================
        // Helper functions.
        //=====================================================================
        function buildMsg(ctrl, func, msg) {
            return ctrl.name + ' -> ' + func.name + '(): ' + msg;
        }

        //=====================================================================
        // Expose functions.
        //=====================================================================
        return {
            debug: debug,
            error: error,
            info: info,
            log: log,
            warn: warn
        };
    }

})();

(function () {
    'use strict';

    angular.module('app.providers').value('toastr', toastr);
    angular.module('app.providers').factory('notificationProvider', NotificationProvider);

    NotificationProvider.$inject = ['toastr', 'logger'];

    function NotificationProvider(toastr, logger) {
        //=====================================================================
        // Toastr options.
        //=====================================================================
        toastr.options = {
            closeButton: false,
            debug: false,
            newestOnTop: false,
            progressBar: false,
            positionClass: 'toast-top-center',
            preventDuplicates: false,
            onclick: null,
            showDuration: 500,
            hideDuration: 1000,
            timeOut: 2000,
            extendedTimeOut: 1000,
            showEasing: 'swing',
            hideEasing: 'linear',
            showMethod: 'fadeIn',
            hideMethod: 'fadeOut'
        };

        //=====================================================================
        // Public functions.
        //=====================================================================
        function success(msg) {
            toastr.success(msg);
            logger.debug(NotificationProvider, success, msg);
        }

        function info(msg) {
            toastr.info(msg);
            logger.debug(NotificationProvider, info, msg);
        }

        function warning(msg) {
            toastr.warning(msg);
            logger.debug(NotificationProvider, warning, msg);
        }

        function error(msg) {
            toastr.error(msg);
            logger.debug(NotificationProvider, error, msg);
        }

        //=====================================================================
        // Expose functions.
        //=====================================================================
        return {
            success: success,
            info: info,
            warning: warning,
            error: error
        };
    }

})();
(function () {
    'use strict';

    angular.module('app.providers').factory('validation', Validation);

    Validation.$inject = [];

    function Validation() {
        //=====================================================================
        // Exposed functions.
        //=====================================================================
        function hasError(form, formElement) {
            return form.$submitted && formElement.$invalid;
        }

        function hasWarn(form, formElement) {
            return !form.$submitted && formElement.$dirty && formElement.$invalid;
        }

        function hasSuccess(formElement) {
            return formElement.$dirty && !formElement.$invalid;
        }

        function getClass(form, formElement) {
            return {
                'has-error': hasError(form, formElement),
                'has-warning': hasWarn(form, formElement),
                'has-success': hasSuccess(formElement)
            };
        }

        //=====================================================================
        // Expose functions.
        //=====================================================================
        return {
            hasError: hasError,
            hasWarn: hasWarn,
            hasSuccess: hasSuccess,
            getClass: getClass
        };
    }

})();
(function () {
    'use strict';

    angular.module('app.resources').factory('RecipeResource', RecipeResource);

    RecipeResource.$inject = ['$resource'];

    function RecipeResource($resource) {
        //=====================================================================
        // Resource.
        //=====================================================================
        var RecipeRes = $resource('/api/recipes/:id', {_id: '@id'}, {
            update: { method: 'PUT', isArray: false }
        });

        RecipeRes.prototype.temp = function () {

        };

        return RecipeRes;
    }

})();
(function () {
    'use strict';

    angular.module('app.resources').factory('UserResource', UserResource);

    UserResource.$inject = ['$resource'];

    function UserResource($resource) {
        //=====================================================================
        // Resource.
        //=====================================================================
        var UserRes = $resource('/api/users/:id', {_id: '@id'}, {
            update: { method: 'PUT', isArray: false }
        });

        UserRes.prototype.isAdmin = function () {
            return this.roles && this.roles.indexOf('admin') >= 0;
        };

        return UserRes;
    }

})();
(function () {
    'use strict';

    angular.module('app.services').factory('authService', AuthService);

    AuthService.$inject = ['$http', '$q', 'logger', 'identityService', 'UserResource'];

    function AuthService($http, $q, logger, identityService, UserResource) {
        //=====================================================================
        // Variables.
        //=====================================================================
        var notAuthorizedObj = { notAuthorized: true };

        //=====================================================================
        // Public functions.
        //=====================================================================
        function authenticateUser(username, password) {
            var deferred = $q.defer();

            $http.post('/login', {
                username: username,
                password: password
            }).then(function (response) {
                if (response.data.success) {
                    var user = new UserResource();
                    angular.extend(user, response.data.user);

                    // Save current user.
                    identityService.currentUser = user;

                    deferred.resolve(true);
                } else {
                    deferred.resolve(false);
                }
            });

            return deferred.promise;
        }

        function logOutUser() {
            var deferred = $q.defer();

            $http.post('/logout', { logOut: true })
                .then(function () {
                    identityService.currentUser = null;
                    deferred.resolve();
                });

            return deferred.promise;
        }

        function createUser(newUserData) {
            var deferred = $q.defer();
            var newUser = new UserResource(newUserData);

            newUser.$save()
                .then(function () {
                    identityService.currentUser = newUser;
                    deferred.resolve();
                })
                .catch(function (errorResponse) {
                    deferred.reject(errorResponse.data.reason);
                });

            return deferred.promise;
        }

        function updateCurrentUser(newUserData) {
            var deferred = $q.defer();

            var clone = angular.copy(identityService.currentUser);
            angular.extend(clone, newUserData);

            clone.$update()
                .then(function () {
                    identityService.currentUser = clone;
                    deferred.resolve();
                })
                .catch(function (errorResponse) {
                    deferred.reject(errorResponse.data.reason);
                });

            return deferred.promise;
        }

        function authorizeCurrentUserForRoute(role) {
            if (identityService.isAuthorized(role)) {
                return true;
            } else {
                return $q.reject(notAuthorizedObj);
            }
        }

        function authorizeAuthenticatedUserForRoute() {
            if (identityService.isAuthenticated()) {
                return true;
            } else {
                return $q.reject(notAuthorizedObj);
            }
        }

        //=====================================================================
        // Expose functions.
        //=====================================================================
        return {
            authenticateUser: authenticateUser,
            logOutUser: logOutUser,
            createUser: createUser,
            updateCurrentUser: updateCurrentUser,
            authorizeCurrentUserForRoute: authorizeCurrentUserForRoute,
            authorizeAuthenticatedUserForRoute: authorizeAuthenticatedUserForRoute
        };
    }

})();
(function () {
    'use strict';

    angular.module('app.services').factory('identityService', IdentityService);

    IdentityService.$inject = ['$window', 'logger', 'UserResource'];

    function IdentityService($window, logger, UserResource) {
        //=====================================================================
        // Handle bootstrapped current user object.
        //=====================================================================
        var currentUser = null;

        if (!!$window.bootstrappedUserObject) {
            currentUser = new UserResource();
            angular.extend(currentUser, $window.bootstrappedUserObject);
        }

        //=====================================================================
        // Public functions.
        //=====================================================================
        function isAuthenticated() {
            return !!this.currentUser;
        }

        function isAuthorized(role) {
            return !!this.currentUser && this.currentUser.roles.indexOf(role) >= 0;
        }

        //=====================================================================
        // Expose functions.
        //=====================================================================
        return {
            currentUser: currentUser,
            isAuthenticated: isAuthenticated,
            isAuthorized: isAuthorized
        };
    }

})();
//# sourceMappingURL=data:application/json;base64,